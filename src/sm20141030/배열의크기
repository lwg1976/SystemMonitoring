http://books.google.co.kr/books?id=euSiAwAAQBAJ&pg=PT1517&lpg=PT1517&dq=byte+%EB%B0%B0%EC%97%B4%EC%9D%98+%ED%81%AC%EA%B8%B0+1024&source=bl&ots=ViUIlOsaRP&sig=ZOT0coG1Cckd5x6SvKkoKoyfN6s&hl=ko&sa=X&ei=StZRVPu_JaHAmwWIzYHoDw&ved=0CBsQ6AEwAA#v=onepage&q=byte%20%EB%B0%B0%EC%97%B4%EC%9D%98%20%ED%81%AC%EA%B8%B0%201024&f=false

byte[] b는 바가지와 같다. 상수도에서 물을 받아 하수도로 물을 다시 버릴 때
바가지의 크기가 너무 작으면 수없이 많이 물을 퍼야 하고,
바가지의 크기가 너무 크면 한 번씩 풀 때마다 너무 많은 힘이 든다.

byte[] b 배열 또한 마찬가지이다.
byte 배열의 길이를
너무 크게 잡으면 JVM 힙 영역에 너무 많은 메모리를 사용하게 되고,
너무 작게 잡으면 효율성이 떨어지게 된다.
보통 byte 배열의 길이는 1,024에서 2,048 사이로 정하는 것이 좋다.

===============================================================================================
http://hyeonstorage.tistory.com/m/post/236
위의 예제처럼 파일을 통째로 한꺼번에 읽는 것은 기계적인 동작을 최소화하기 위한 방법이다.
하지만 무조건 버퍼의 크기가 큰 것이 좋은 것인가에 대해서는 조금 더 깊이 생각해 보아야 한다.
버퍼가 크면 메모리의 낭비를 유발할 수 있다. 실제로 필요한 데이터는 4바이트 인데 통째로 데이터를 가져와서 작업을 하기 때문이다.
또한 파일의 크기가 엄청나게 클 경우 메모리가 부족해져 Exception이 발생할 수 있다.
(실제 로그 파일의 경우 파일당 GB가 넘을 수 있다.)

따라서 버퍼의 크기를 적정선에서 만족할 수 있도록 잡아서 입력과 출력의 반복이 필요하며,
보통 1024, 2048, 4096, 8192 와 같이 배수 형식으로 버퍼의 크기를 잡는 것이 일반적이다.